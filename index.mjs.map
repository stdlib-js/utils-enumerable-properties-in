{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport getOwnPropertySymbols from '@stdlib/utils-property-symbols';\nimport getOwnPropertyNames from '@stdlib/utils-property-names';\nimport getPrototypeOf from '@stdlib/utils-get-prototype-of';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport isEnumerable from '@stdlib/assert-is-enumerable-property';\nimport Object from '@stdlib/object-ctor';\n\n\n// MAIN //\n\n/**\n* Returns an array of an object's own and inherited enumerable property names and symbols.\n*\n* @param {*} value - input object\n* @returns {Array} a list of own and inherited enumerable property names and symbols\n*\n* @example\n* var props = enumerablePropertiesIn( [] );\n* // returns []\n*/\nfunction enumerablePropertiesIn( value ) {\n\tvar cache;\n\tvar out;\n\tvar obj;\n\tvar tmp;\n\tvar k;\n\tvar i;\n\n\tif ( value === null || value === void 0 ) {\n\t\treturn [];\n\t}\n\t// Cast the value to an object:\n\tobj = Object( value );\n\n\t// Walk the prototype chain collecting enumerable properties...\n\tcache = {};\n\tout = [];\n\tdo {\n\t\ttmp = getOwnPropertyNames( obj );\n\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\tk = tmp[ i ];\n\t\t\tif (\n\t\t\t\thasOwnProp( cache, k ) === false && // guards against processing a name more than once\n\t\t\t\tisEnumerable( obj, k )\n\t\t\t) {\n\t\t\t\tout.push( k );\n\t\t\t}\n\t\t\tcache[ k ] = true;\n\t\t}\n\t\ttmp = getOwnPropertySymbols( obj );\n\t\tfor ( i = 0; i < tmp.length; i++ ) {\n\t\t\tk = tmp[ i ];\n\t\t\tif (\n\t\t\t\thasOwnProp( cache, k ) === false && // guards against processing a symbol more than once\n\t\t\t\tisEnumerable( obj, k )\n\t\t\t) {\n\t\t\t\tout.push( k );\n\t\t\t}\n\t\t\tcache[ k ] = true;\n\t\t}\n\t\tobj = getPrototypeOf( obj );\n\t} while ( obj );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default enumerablePropertiesIn;\n"],"names":["enumerablePropertiesIn","value","cache","out","obj","tmp","k","i","Object","getOwnPropertyNames","length","hasOwnProp","isEnumerable","push","getOwnPropertySymbols","getPrototypeOf"],"mappings":";;ikBA0CA,SAASA,EAAwBC,GAChC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKN,QACJ,MAAO,GAGRG,EAAMI,EAAQP,GAGdC,EAAQ,CAAA,EACRC,EAAM,GACN,EAAG,CAEF,IADAE,EAAMI,EAAqBL,GACrBG,EAAI,EAAGA,EAAIF,EAAIK,OAAQH,IAC5BD,EAAID,EAAKE,IAEmB,IAA3BI,EAAYT,EAAOI,IACnBM,EAAcR,EAAKE,IAEnBH,EAAIU,KAAMP,GAEXJ,EAAOI,IAAM,EAGd,IADAD,EAAMS,EAAuBV,GACvBG,EAAI,EAAGA,EAAIF,EAAIK,OAAQH,IAC5BD,EAAID,EAAKE,IAEmB,IAA3BI,EAAYT,EAAOI,IACnBM,EAAcR,EAAKE,IAEnBH,EAAIU,KAAMP,GAEXJ,EAAOI,IAAM,EAEdF,EAAMW,EAAgBX,EACtB,OAASA,GAEV,OAAOD,CACR"}